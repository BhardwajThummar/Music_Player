{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bhardwaj\\\\Documents\\\\work\\\\Learning\\\\REACT\\\\react-player\\\\src\\\\components\\\\LibrarySong.js\";\nimport React from 'react';\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying\n}) => {\n  const songSelectHandler = () => {\n    const selectedSong = songs.filter(state => state.id === id);\n    setCurrentSong(selectedSong[0]); //check is the song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `library-song`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["C:/Users/Bhardwaj/Documents/work/Learning/REACT/react-player/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","songSelectHandler","selectedSong","filter","state","playPromise","current","play","undefined","then","audio","name","cover","artist"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,cAAd;AAA8BC,EAAAA,EAA9B;AAAkCC,EAAAA,QAAlC;AAA4CC,EAAAA;AAA5C,CAAD,KAA4D;AAC5E,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,YAAY,GAAGN,KAAK,CAACO,MAAN,CAAcC,KAAD,IAAWA,KAAK,CAACN,EAAN,KAAaA,EAArC,CAArB;AACAD,IAAAA,cAAc,CAACK,YAAY,CAAC,CAAD,CAAb,CAAd,CAF4B,CAG5B;;AACA,QAAGF,SAAH,EAAa;AACT,YAAMK,WAAW,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAGF,WAAW,KAAKG,SAAnB,EAA6B;AACzBH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAW;AACxBX,UAAAA,QAAQ,CAACO,OAAT,CAAiBC,IAAjB;AACH,SAFD;AAGH;AACJ;AACJ,GAZD;;AAaA,sBACI;AAAK,IAAA,OAAO,EAAEN,iBAAd;AAAiC,IAAA,SAAS,EAAG,cAA7C;AAAA,4BACI;AAAK,MAAA,GAAG,EAAEN,IAAI,CAACgB,IAAf;AAAqB,MAAA,GAAG,EAAEhB,IAAI,CAACiB;AAA/B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACI;AAAA,kBAAKjB,IAAI,CAACgB;AAAV;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKhB,IAAI,CAACkB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAvBD;;KAAMnB,W;AAyBN,eAAeA,WAAf","sourcesContent":["import React from 'react';\r\n\r\nconst LibrarySong = ({song, songs, setCurrentSong, id, audioRef, isPlaying}) => {\r\n    const songSelectHandler = () => {\r\n        const selectedSong = songs.filter((state) => state.id === id);\r\n        setCurrentSong(selectedSong[0]);\r\n        //check is the song is playing\r\n        if(isPlaying){\r\n            const playPromise = audioRef.current.play();\r\n            if(playPromise !== undefined){\r\n                playPromise.then((audio) => {\r\n                    audioRef.current.play();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    return(\r\n        <div onClick={songSelectHandler} className={`library-song`}>\r\n            <img alt={song.name} src={song.cover}></img>\r\n            <div className=\"song-description\">\r\n                <h3>{song.name}</h3>\r\n                <h4>{song.artist}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LibrarySong;"]},"metadata":{},"sourceType":"module"}