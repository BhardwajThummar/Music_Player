{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Bhardwaj\\\\Documents\\\\work\\\\Learning\\\\REACT\\\\react-player\\\\src\\\\components\\\\Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { fa, FaPlay, FaPause } from 'react-icons/fa';\nimport { IoPlayCircle } from 'react-icons/io5';\n\nconst Player = ({\n  currentSong,\n  setIsPlaying,\n  isPlaying\n}) => {\n  _s();\n\n  //Ref\n  const audioRef = useRef(null); //Event Handlers\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  };\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n  }; //State\n\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: getTime(songInfo.currentTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songInfo.duration,\n        onChange: dragHandler,\n        value: songInfo.currentTime,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: getTime(songInfo.duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: /*#__PURE__*/_jsxDEV(\"fa\", {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2rem\",\n        icon: isPlaying ? FaPause : FaPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Player, \"sOMGDV0+bsYYc+4RupNWl2GUN08=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/Bhardwaj/Documents/work/Learning/REACT/react-player/src/components/Player.js"],"names":["React","useRef","useState","fa","FaPlay","FaPause","IoPlayCircle","Player","currentSong","setIsPlaying","isPlaying","audioRef","playSongHandler","current","pause","play","timeUpdateHandler","e","target","currentTime","duration","setSongInfo","songInfo","getTime","time","Math","floor","slice","dragHandler","value","audio"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react';\r\nimport { useState } from 'react';\r\nimport {fa,FaPlay, FaPause} from 'react-icons/fa';\r\nimport {IoPlayCircle} from 'react-icons/io5';\r\n\r\nconst Player = ({currentSong,setIsPlaying,isPlaying}) => {\r\n    //Ref\r\n    const audioRef = useRef(null);\r\n    //Event Handlers\r\n    const playSongHandler = () => {\r\n        if (isPlaying) {\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        }else{\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    };\r\n    const timeUpdateHandler = (e) => {\r\n        const current = e.target.currentTime;\r\n        const duration = e.target.duration;\r\n        setSongInfo({...songInfo,currentTime: current, duration});\r\n    };\r\n    const getTime = (time) => {\r\n        return(\r\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        );\r\n    };\r\n    const dragHandler = (e) => {\r\n        audioRef.current.currentTime = e.target.value;\r\n        setSongInfo({...songInfo, currentTime: e.target.value});\r\n    };\r\n    //State\r\n    const [songInfo,setSongInfo] = useState({\r\n        currentTime: 0,\r\n        duration: 0,\r\n    });\r\n    return(\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p><b>{getTime(songInfo.currentTime)}</b></p>\r\n                <input min={0} max={songInfo.duration} onChange={dragHandler} value={songInfo.currentTime} type=\"range\"  />\r\n                <p><b>{getTime(songInfo.duration)}</b></p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                {/* <fa className=\"skip-back\" size=\"2rem\" icon={IoPlaySkipBackOutline} />  */}\r\n                <fa\r\n                    onClick={playSongHandler} \r\n                    className=\"play\" \r\n                    size=\"2rem\" \r\n                    icon={isPlaying ? FaPause : FaPlay}\r\n                    />\r\n                {/* <FontAwesomeIcon className=\"skip-back\" size=\"2rem\" icon={faski} /> */}\r\n            </div>\r\n            <audio onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref={audioRef} src={currentSong.audio}></audio>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;\r\n"]},"metadata":{},"sourceType":"module"}