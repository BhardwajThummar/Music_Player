{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Bhardwaj\\\\Documents\\\\work\\\\Learning\\\\REACT\\\\react-player\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react'; //Import Styles\n\nimport \"./styles/app.scss\"; //Adding Components\n\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav'; //Import Data\n\nimport data from './data';\n\nfunction App() {\n  _s();\n\n  //Ref\n  const audioRef = useRef(null); //State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; //Calculate Percentage\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration: duration,\n      animationPercentage: animation\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      setSongs: setSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      setSongs: setSongs,\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      isPlaying: isPlaying,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"VB3KMYgqA40wohxDewcbLpPkedk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Bhardwaj/Documents/work/Learning/REACT/react-player/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","songEndHandler","currentIndex","findIndex","song","id","length","play","audio"],"mappings":"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","sourcesContent":["import React, {useState,useRef} from 'react';\n//Import Styles\nimport \"./styles/app.scss\";\n//Adding Components\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\n//Import Data\nimport data from './data';\nfunction App() {\n  //Ref\n  const audioRef = useRef(null);\n  //State\n  const [songs,setSongs] = useState(data());\n  const [currentSong,setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo,setSongInfo] = useState({\n      currentTime: 0,\n      duration: 0,\n      animationPercentage: 0,\n    });\n    const [libraryStatus,setLibraryStatus] = useState(false);\n    const timeUpdateHandler = (e) => {\n      const current = e.target.currentTime;\n      const duration = e.target.duration;\n      //Calculate Percentage\n      const roundedCurrent = Math.round(current);\n      const roundedDuration = Math.round(duration);\n      const animation = Math.round((roundedCurrent/roundedDuration) * 100);\n      setSongInfo({...songInfo,currentTime: current, duration:duration, animationPercentage:animation,});\n  };\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if(isPlaying) audioRef.current.play();\n  }\n  return (\n    <div className=\"App\">\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus}/>\n      <Song currentSong={currentSong} />\n      <Player audioRef={audioRef} setIsPlaying={setIsPlaying} isPlaying={isPlaying} currentSong={currentSong} setSongInfo={setSongInfo} songInfo={songInfo} songs={songs} setCurrentSong={setCurrentSong} setSongs={setSongs} />\n      <Library setSongs={setSongs} audioRef={audioRef} songs={songs} setCurrentSong={setCurrentSong} isPlaying={isPlaying} libraryStatus={libraryStatus} />\n      <audio onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref={audioRef} src={currentSong.audio} onEnded={songEndHandler}></audio>\n    </div>\n  );\n} \n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}