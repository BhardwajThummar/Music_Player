{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Bhardwaj\\\\Documents\\\\work\\\\Learning\\\\REACT\\\\react-player\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react'; //Import Styles\n\nimport \"./styles/app.scss\"; //Adding Components\n\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library'; //Import Util\n\nimport data from './util';\n\nfunction App() {\n  _s();\n\n  //Ref\n  const audioRef = useRef(null); //State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vyTmASAYpYrp+HEuIsMReN9SMDc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Bhardwaj/Documents/work/Learning/REACT/react-player/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","timeUpdateHandler","audio"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,MAAxB,QAAqC,OAArC,C,CACA;;AACA,OAAO,mBAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AACA,SAASC,GAAT,GAAe;AAAA;;AACT;AACA,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB,CAFS,CAGb;;AACA,QAAM,CAACO,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,CAACK,IAAI,EAAL,CAAjC;AACA,QAAM,CAACK,WAAD,EAAaC,cAAb,IAA+BX,QAAQ,CAACQ,KAAK,CAAC,CAAD,CAAN,CAA7C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEU;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAEE,SAAnB;AAA8B,MAAA,YAAY,EAAEC,YAA5C;AAA0D,MAAA,WAAW,EAAEH;AAAvE;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEF,KAAhB;AAAuB,MAAA,cAAc,EAAEG;AAAvC;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAO,MAAA,gBAAgB,EAAEG,iBAAzB;AAA4C,MAAA,YAAY,EAAEA,iBAA1D;AAA6E,MAAA,GAAG,EAAEP,QAAlF;AAA4F,MAAA,GAAG,EAAEG,WAAW,CAACK;AAA7G;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAfQT,G;;KAAAA,G;AAiBT,eAAeA,GAAf","sourcesContent":["import React, {useState,useRef} from 'react';\n//Import Styles\nimport \"./styles/app.scss\";\n//Adding Components\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\n//Import Util\nimport data from './util';\nfunction App() {\n      //Ref\n      const audioRef = useRef(null);\n  //State\n  const [songs,setSongs] = useState(data());\n  const [currentSong,setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  return (\n    <div className=\"App\">\n      <Song currentSong={currentSong} />\n      <Player isPlaying={isPlaying} setIsPlaying={setIsPlaying} currentSong={currentSong} />\n      <Library songs={songs} setCurrentSong={setCurrentSong} />\n      <audio onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref={audioRef} src={currentSong.audio}></audio>\n    </div>\n  );\n} \n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}